import { AlignType } from "../typing"
import { ArrayTypeRegEx, BasicType } from "./regex"

/**
 *
 */
export const TempCopyright = () => {
    const array = [
        "The API Document is generated by api-hose!",
        "Author: Herbert He<Herbert.He0229@gmail.com>",
        "License: MIT",
        "Repo: https://github.com/HerbertHe/api-hose",
    ]
    return array.map(
        (item: string, index: number) =>
            `<!-- ${item} -->${index === array.length - 1 ? "\n" : ""}`
    )
}

/**
 * 文件名模板
 * @param filename 文件名
 */
export const TempFilename = (filename: string) => {
    return `# ${filename}\n`
}

/**
 * 标题名模板
 * @param heading 标题名
 */
export const TempHeading = (heading: string) => {
    return `## ${heading}\n`
}

/**
 * API描述模板
 * @param desc 描述信息
 */
export const TempDescription = (desc: string) => {
    return `> ${desc}\n`
}

/**
 * HTTP请求模板
 * @param prefix 不同语言的前缀
 * @param method 请求的方法
 */
export const TempMethod = (prefix: string, method: string) => {
    return `${prefix}: \`${method}\`\n`
}

const TempAlign = (align: AlignType) => {
    switch (align) {
        case "left":
            return `| :--- | :--- | :--- |`
        case "right":
            return `| ---: | ---: | ---: |`
        case "center":
            return `| :---: | :---: | :---: |`
    }
}

/**
 * 参数表格表头模板
 * @param {Array<string>} head 表头
 * @param {"left" | "right" | "center"} align 表格对齐方式
 */
export const TempTableHead = (head: Array<string>, align: AlignType) => {
    return `| ${head[0]} | ${head[1]} | ${head[2]} |\n${TempAlign(align)}`
}

/**
 * 参数表格内容模板
 * @param name 参数名
 * @param type 参数类型
 * @param desc 参数描述
 * @param optional 可选描述
 */
export const TempTableContent = (
    name: string,
    type: string,
    desc: string,
    optional: string,
    prefix: string,
    suffix: string
) => {
    let exportType: string = ""
    if (BasicType.includes(type)) {
        exportType = type
    } else if (ArrayTypeRegEx.test(type)) {
        const ans = ArrayTypeRegEx.exec(type) as RegExpExecArray
        const RequestHeadingRegExp = new RegExp(
            `${prefix}([A-Za-z0-9\\$\\_]+)${suffix}`
        )
        if (BasicType.includes(ans[1])) {
            exportType = `Array<${ans[1]}>`
        } else if (RequestHeadingRegExp.test(ans[1])) {
            // 过滤请求类型
            const subAns = RequestHeadingRegExp.exec(ans[1]) as RegExpExecArray
            exportType = `Array<[${subAns[1]}](#${subAns[1]})>`
        } else {
            exportType = `[${type}](${type})`
        }
    } else {
        exportType = `[${type}](${type})`
    }
    return `| ${name} | ${exportType} | ${desc}${
        optional ? ` (${optional})` : ""
    } |`
}

/**
 * 参数表格结束模板
 */
export const TempTableEnd = () => {
    return ""
}
